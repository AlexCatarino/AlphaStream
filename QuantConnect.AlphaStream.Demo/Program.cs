using System;
using System.Collections.Generic;
using System.Linq;
using QuantConnect.AlphaStream.Models;
using QuantConnect.AlphaStream.Requests;
using QuantConnect.AlphaStream.Tests;

namespace QuantConnect.AlphaStream.Demo
{
    class AlphaStreamsDemonstration
    {
        static void Main(string[] args)
        {
            //Initialize:
            //Basic credentials for Demo Client
            Title("QuantConnect: Alpha Streams Demo Project v0.1");

            //Alpha Streams REST Client
            // This is the search and subscription manager
            var client = new AlphaStreamRestClient(Credentials.Test);
            AlphaStreamRestClient.ResponseTracingEnabled = false;
            AlphaStreamRestClient.ResponseTracingEnabled = false;

            //1.Search to find the demo alpha.
            var projectId = 830918;
            Title("1. Alpha Search");
            Log($"1. /alpha/search: Searching alphas matching project id: {projectId}...");
            var alphas = client.Execute(new SearchAlphasRequest { ProjectId = projectId }).Result;
            Log($"1. /alpha/search: Located {alphas.Count}.. ");
            foreach (var a in alphas)
            {
                Log($"1. /alpha/search: Alpha.Id: {a.Id} - Alpha.Project: {a.Project.Name}");
            }
            Pause();


            // 3. Search for information on a specific alpha:
            Title("2. Alpha Detail View");
            var alphaId = "b4764d68a792fc4654d910516";
            Log("2. /alpha/id: Pulling information for specific Alpha...");
            var alpha = client.Execute(new GetAlphaByIdRequest() { Id = alphaId }).Result;
            Log($"2. /alpha/{alphaId}: Specific Alpha.Project.Name: {alpha.Project.Name} Fee: {alpha.SubscriptionFee} Exclusive Available: {alpha.ExclusiveAvailable} Listed: {alpha.ListedDate}");
            Pause();


            // 3. List current insights generated by specific alpha:
            Title("3. Alpha Insights Generated");
            Log("3. /alpha/alpha-id/insights: Pulling information for specific Alpha...");
            var insightAlphaId = "55d43832ed982b684370242b4";
            var insights = client.Execute(new GetAlphaInsightsRequest() { Id = insightAlphaId }).Result;
            foreach (var i in insights)
            {
                Log($"3. /alpha/{insightAlphaId}/insights: Prediction for {(i.Ticker ?? "").ToUpper()} going {i.Direction} by {i.Magnitude ?? 0:P} from {i.Reference ?? 0:C} created at {i.Created:u} from {i.Source} for {i.Period ?? 0} period of seconds.");
            }
            Pause();


            // 3. Search by author information:
            Title("4. Author Search");
            var language = "C#";
            Log($"4. /author/search: Searching authors who code in: '{language}'");
            var authors = client.Execute(new SearchAuthorsRequest
            {
                Languages = new List<string> { "C#" },
                Projects = new NumberRange<int>() { Minimum = 5 }
            }).Result;
            foreach (var b in authors.OrderByDescending(c => c.Projects).Take(5))
            {
                Log($"4. /author/search: Author.Id: {b.Id.Substring(0, 5)} \t Projects: {b.Projects} \t Last Online: {b.LastOnlineTime} \t Location: {b.Location}");
            }
            Pause();


            // 5. Detailed information about a specific author:
            Title("5. Author Detail View");
            var authorId = "1f48359f6c6cbad65b091232eaae73ce";
            Log($"5. /author/id: Pulling information for specific author: '{authorId}'");
            var author = client.Execute(new GetAuthorByIdRequest {Id = authorId}).Result;
            Log($"5. /author/id: Specific Author Details:" +
                $"\r\n-> Id: \t\t\t {author.Id} " +
                $"\r\n-> Bio: \t\t {author.Biography.Substring(0, 100)}..." +
                $"\r\n-> Backtests: \t\t {author.Backtests}" +
                $"\r\n-> Projects: \t\t {author.Projects}" +
                $"\r\n-> Language: \t\t {author.Language}" +
                $"\r\n-> Signed Up: \t\t {author.SignupTime}");
            Pause();
        }

        /// <summary>
        /// Log this snippet with a time date stamp.
        /// </summary>
        private static void Log(string message, params string[] args)
        {
            Console.WriteLine(DateTime.UtcNow.ToString("u") + " " + message);
        }

        /// <summary>
        /// Print a title
        /// </summary>
        private static void Title(string message)
        {
            Log($"-------------------- {message} --------------------");
        }

        /// <summary>
        /// Pause for a moment for the demo
        /// </summary>
        private static void Pause()
        {
            Log("-------------------- Press Key To Continue -------------------- \r\n\r\n");
            Console.ReadKey();
        }
    }
}
