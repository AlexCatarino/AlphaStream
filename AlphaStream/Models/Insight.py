from datetime import datetime


class Insight:
    """Individual prediction/insight generated by an Alpha in the QuantConnect Alpha Streams market"""

    def __init__(self, json):
        # Unique hash ID of the Insight
        self.Id = json['id']

        # Insight type - Price or Volatility. Only price insights are supported at this time
        self.Type = json.get('type', None)

        # Predicted direction of movement - Up, Down, or Flat
        self.Direction = json.get('direction', None)

        # Double score of the direction prediction (0,1)
        self.DirectionScore = json.get('score-direction', None)

        # Duration of the Insight in seconds
        self.Period = json.get('period', None)

        # UTC time the Insight was created
        self.CreatedTime = datetime.utcfromtimestamp(json['created-time']) if 'created-time' in json else None

        # UTC time the Insight expired
        self.CloseTime = datetime.utcfromtimestamp(json['close-time']) if 'close-time' in json else None

        # Predicted magnitude change in Insight price or volatility (decimals)
        self.Magnitude = json.get('magnitude', None)

        # Double score of the magnitude prediction (0,1)
        self.MagnitudeScore = json.get('score-magnitude', None)

        # Author-set confidence that the Insight predicted duration, magnitude, and direction are correct
        self.Confidence = json.get('confidence', None)

        # Unique hash or author-set name of the model the Insight was created from
        self.SourceModel = json.get('source-model', None)

        # Insight group hash if the Insight was grouped with other Insights
        self.Group = json.get('group', None)

        # Where the Insight was generated - in sample, out of sample, or live trading
        self.Source = json.get('source', None)

        # Value of the security at the time the Insight was created
        self.ReferenceValue = json.get('reference-value', None)

        # Value of the security at the time the Insight expired
        self.ReferenceValueFinal = json.get('reference-value-final', None)

        # Estimated value of the Insight in USD
        self.EstimatedValue = json.get('estimated-value', None)

        # Unique QuantConnect identifier of the Insight security
        self.Symbol = json.get('symbol', None)

        # Ticker of the asset underlying the Insight at the time the insight was created
        self.Ticker = json.get('ticker', None)

        # Boolean - True if the Insight cannot be trusted (i.e. invalidated due to bug) else False
        self.Invalid = json.get('invalid', None)

        # Boolean - True if the Insight has expired and been scored
        self.ScoreFinal = json.get('score-final', False)

        # Decimal weight assigned to the Insight
        self.Weight = json.get('weight', None)

    def __repr__(self):
        return f'{self.CreatedTime} Alpha {self.Source} {self.Type} insight for {self.Ticker:<10} going {self.Direction} over the next {self.Period}s'